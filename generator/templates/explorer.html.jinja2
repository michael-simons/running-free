{% extends "base.html.jinja2" %}
{% block title %}Explorer | {{ super() }}{% endblock %}
{% block nav_explorer %}class="nav-link active" aria-current="page"{% endblock %}
{% block content %}
    <h1 class="title">Explorer the Earth</h1>
    <p class="lead">One tile at a time…</p>
    <div class="row mb-4">
        <div class="col-12">
            {% for _summary in summary.itertuples() %}
                <p>
                    Tiles are squares on a map and when one of your activities crosses a square it is counted as a tile.
                    If you cross the connected tile left, right, top and bottom of any tile too, that tile is counted as
                    a cluster-tile. The max square is based on the biggest square you can create with all the connected
                    tiles. The idea of tiles itself stems from <a href="https://en.wikipedia.org/wiki/Tiled_web_map">tiled
                    web maps</a>. In Germany a tile at zoom level 14 has roughly an area of <strong>1.55km²</strong>.
                </p>
                <p>
                    I cycled, ran, walked and swam <strong>{{ _summary['total_tiles']|fmt_int }}</strong> tiles in
                    total, the biggest square is <strong>{{ _summary['max_square']|fmt_int }}</strong> by
                    <strong>{{ _summary['max_square']|fmt_int }}</strong>
                    (<strong>~{{ _summary['max_square_area']|fmt_int }}km²</strong>) and the biggest cluster contains
                    <strong>{{ _summary['max_cluster']|fmt_int }}</strong> tiles
                    (<strong>~{{ _summary['max_cluster_area']|fmt_int }}km²</strong>) at zoom level
                    <strong>14</strong>. Last update to the database was on <strong>{{ max_garmin|fmt_date }}</strong>.
                </p>
            {% endfor %}
        </div>
        <div class="col-12">
            <form id="tiles-control" class="row">
                <div class="col-sm-6 col-lg-5 col-xl-4">
                    <label><strong>Coloring</strong></label>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="coloring-choice" id="coloring-default"
                               value="default"
                               checked>
                        <label class="form-check-label" for="coloring-default">
                            Default coloring
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="coloring-choice" id="coloring-heatmap"
                               value="heatmap">
                        <label class="form-check-label" for="coloring-heatmap">
                            Heatmap by number of visits
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="coloring-choice" id="coloring-by-cluster"
                               value="by-cluster">
                        <label class="form-check-label" for="coloring-by-cluster">
                            By cluster
                        </label>
                    </div>
                </div>
                <div class="col-sm-6 col-lg-5 col-xl-4">
                    <label><strong>Zoom level</strong></label>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="tile-size-choice" id="tile-size-default"
                               value="z14"
                               checked>
                        <label class="form-check-label" for="tile-size-default">
                            14 (Like <a href="https://veloviewer.com">VeloViewer</a> and <a
                                href="https://www.statshunters.com">StatsHunters</a>)
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="tile-size-choice" id="tile-size-z17"
                               value="z17">
                        <label class="form-check-label" for="tile-size-z17">
                            17 (Like <a href="https://squadrats.com">Squadrats</a>)
                        </label>
                    </div>
                </div>
            </form>
        </div>
        <div class="col-12">
            <div id="map" style="width: 100%; height: 60vh;"></div>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <p>
                Heavily inspired by <a href="https://veloviewer.com">Veloviewer</a>, thanks for at least 4 fabulous
                years in which I have been a happy, paying user. Landscape and OpenCycleMap by <a
                    href="https://www.thunderforest.com">Thunderforest</a>. Here's a small <a
                    href="https://github.com/michael-simons/biking3/blob/main/blog/explorer.md">blog</a> about the
                software behind the map above, how tiles are defined and how I compute which tiles I have visited and
                what clusters and squares exists.
            </p>
        </div>
    </div>
    <script src="{{ url_for('static', filename='js/leaflet.js') }}"></script>
    <script src="{{ url_for('static', filename='js/L.Control.Locate.min.js') }}"></script>
    <script src="{{ url_for('static', filename='js/Leaflet.fullscreen.min.js') }}"></script>
    <script src="{{ url_for('static', filename='js/js-colormaps.js') }}"></script>
    <script>
        window.onload = function () {

            function addPopup(feature, layer) {
                let lines = []
                for (const property in feature.properties) {
                    lines.push(`<dt>${property}</dt><dd>${feature.properties[property]}</dd>`)
                }

                layer.bindPopup('<dl>' + lines.join('') + '</dl>')
            }

            const osmLayer = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '&copy; OpenStreetMap'
            });
            const layers = {'OpenStreetMap': osmLayer}

            let defaultLayer;
            {% if thunderforest_api_key is not none %}
                const attribution = 'Maps © <a href="https://www.thunderforest.com">Thunderforest</a>, Data © <a href="https://www.openstreetmap.org/copyright">OpenStreetMap contributors</a>'
                const thunderforestApiKey = '{{ thunderforest_api_key }}';
                for (const layer of [{
                    'n': 'OpenCycleMap',
                    'u': 'https://tile.thunderforest.com/cycle/{z}/{x}/{y}{r}.png?apikey='
                }, {
                    'n': 'Landscape',
                    'u': 'https://tile.thunderforest.com/landscape/{z}/{x}/{y}{r}.png?apikey='
                }]) {
                    layers[layer['n']] = L.tileLayer(layer['u'] + thunderforestApiKey, {
                        maxZoom: 18,
                        attribution: attribution
                    });
                }
                defaultLayer = layers['Landscape'];
            {% else %}
                layers['OpenStreetMap'] = defaultLayer = osmLayer;
                layers['CyclOSM'] = L.tileLayer('https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                    attribution: '&copy; <a href="https://www.cyclosm.org/">CyclOSM</a>'
                });
            {% endif %}

            const map = L.map('map', {
                attributionControl: false,
                layers: [defaultLayer]
            }).setView([50.7753, 6.0839], 14);

            const customizedAttributionControl = L.control.attribution().addTo(map);
            customizedAttributionControl.setPrefix('<a href="https://leafletjs.com/">Leaflet</a>');

            const scaleVisit = (v, numBuckets) => {
                const max = Math.pow(2, numBuckets)
                const bucket = Math.min(max, Math.pow(2, Math.floor(Math.log(v) / Math.log(2))));
                return (bucket - 1) / (max - 1);
            }

            let buckets = {};
            let current = 0;
            const tenBuckets = (v) => {
                if (!buckets[v]) {
                    buckets[v] = ((current++) % 10) / 10;
                }
                return buckets[v];
            }
            const rgbToHex = (c) => {
                return "#" + ((1 << 24) + (c[0] << 16) + (c[1] << 8) + c[2]).toString(16).slice(1);
            }

            const coloringChoice = document.getElementById("tiles-control").elements["coloring-choice"];
            const tileSizeChoice = document.getElementById("tiles-control").elements["tile-size-choice"];
            const tilesLayer = L.geoJSON(null, {
                style: function (feature) {
                    const coloring = coloringChoice.value;
                    const partOfCluster = feature.properties.part_of_cluster;

                    let color;
                    let fillOpacity = 0.2;
                    if (coloring === 'heatmap') {
                        color = rgbToHex(evaluate_cmap(scaleVisit(feature.properties.visited_count, 6), 'YlOrRd', true));
                    } else if (coloring === 'by-cluster') {
                        if (partOfCluster !== 'n/a') {
                            color = rgbToHex(evaluate_cmap(tenBuckets(partOfCluster.slice(1)), 'tab10', false));
                            fillOpacity = 0.25;
                        } else {
                            color = 'LightSlateGray'
                            fillOpacity = 0.15;
                        }
                    } else {
                        color = 'IndianRed';
                    }

                    return {weight: 0.5, color: color, fillOpacity: fillOpacity}
                },
                onEachFeature: addPopup
            }).addTo(map);
            const maxClustersLayer = L.geoJSON(null, {
                style: {weight: 2, color: 'Blue', fillOpacity: 0},
                onEachFeature: addPopup
            }).addTo(map);
            const maxSquaresLayer = L.geoJSON(null, {
                style: {weight: 2, color: 'Red', fillOpacity: 0},
                onEachFeature: addPopup
            }).addTo(map);

            const colorButtons = document.querySelectorAll('input[name="coloring-choice"]');
            for (const button of colorButtons) {
                button.addEventListener('change', () => tilesLayer.resetStyle());
            }
            L.control.layers(layers, {
                'Tiles': tilesLayer,
                'Max clusters': maxClustersLayer,
                'Max squares': maxSquaresLayer
            }).addTo(map);
            map.addControl(L.control.locate());
            map.addControl(new L.Control.Fullscreen());

            const urls = {
                'z14': {
                    'squares': '{{ url_for('explorer_json', feature_type='squares', zoom=14) }}',
                    'clusters': '{{ url_for('explorer_json', feature_type='clusters', zoom=14) }}',
                    'tiles': '{{ url_for('explorer_json', feature_type='tiles', zoom=14) }}'
                },
                'z17': {
                    'squares': '{{ url_for('explorer_json', feature_type='squares', zoom=17) }}',
                    'clusters': '{{ url_for('explorer_json', feature_type='clusters', zoom=17) }}',
                    'tiles': '{{ url_for('explorer_json', feature_type='tiles', zoom=17) }}'
                }
            }

            let firstFetch = true;
            const fetchAll = function () {
                const tileSize = tileSizeChoice.value;
                maxSquaresLayer.clearLayers();
                maxClustersLayer.clearLayers();
                tilesLayer.clearLayers();
                buckets = {};
                current = 0;

                document.body.style.cursor = 'wait'
                const squares = fetch(urls[tileSize].squares).then(response => response.json()).then(json => {
                    return [maxSquaresLayer, json]
                });
                const clusters = fetch(urls[tileSize].clusters).then(response => response.json()).then(json => {
                    return [maxClustersLayer, json]
                });
                const tiles = fetch(urls[tileSize].tiles).then(response => response.json()).then(json => {
                    return [tilesLayer, json]
                });

                Promise.all([tiles, clusters, squares]).then(responses => {
                    for (let data of responses) {
                        data[0].addData(data[1])
                    }
                    if (firstFetch && Object.keys(maxSquaresLayer.getBounds()).length !== 0) {
                        map.fitBounds(maxSquaresLayer.getBounds(), {animate: false});
                        firstFetch = false;
                    }
                    document.body.style.cursor = 'default'
                })
            }
            const sizeButtons = document.querySelectorAll('input[name="tile-size-choice"]');
            for (const button of sizeButtons) {
                button.addEventListener('change', () => fetchAll());
            }
            fetchAll();
        }
    </script>
{% endblock %}
